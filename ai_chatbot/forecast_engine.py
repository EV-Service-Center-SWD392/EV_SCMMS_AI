"""
Spare Parts Forecast Engine for EV SCMMS AI Chatbot - AI-Powered Version
Integrated forecasting functionality with AI analysis and improved error handling
"""
import os
import sys
import json
import asyncio
import google.generativeai as genai
from datetime import datetime
from dotenv import load_dotenv

# Add shared directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'shared'))

# Load environment from shared config
load_dotenv(dotenv_path=os.path.join(os.path.dirname(__file__), '..', 'shared', 'config.env'))

# Configure Gemini
genai.configure(api_key=os.getenv('GEMINI_API_KEY'))

class ForecastEngine:
    """Integrated forecast engine using real Supabase data with improved error handling."""
    
    def __init__(self):
        # Initialize Gemini model with simple configuration
        try:
            self.model = genai.GenerativeModel('gemini-2.0-flash-exp')
            print("‚úÖ ForecastEngine initialized with Gemini 2.0 Flash")
        except Exception as e:
            print(f"‚ö†Ô∏è Error initializing Gemini model: {e}")
            # Fallback to earlier model if available
            try:
                self.model = genai.GenerativeModel('gemini-1.5-pro-latest')
                print("‚úÖ Fallback to Gemini 1.5 Pro")
            except:
                raise Exception("Cannot initialize any Gemini model")
    
    async def call_database_function(self, function_name: str, arguments: dict):
        """Call database functions with improved error handling."""
        try:
            from db_connection import fetch
            print(f"üîå Calling database function: {function_name} with args: {arguments}")
            
            if function_name == "get_spare_parts":
                spare_part_id = arguments.get("spare_part_id")
                
                if spare_part_id:
                    sql = """
                    SELECT SparePartID, Name, UnitPrice, Manufacture, IsActive
                    FROM SparePart_TuHT 
                    WHERE SparePartID = %s AND IsActive = true
                    """
                    rows = await fetch(sql, spare_part_id)
                else:
                    sql = """
                    SELECT SparePartID, Name, UnitPrice, Manufacture, IsActive
                    FROM SparePart_TuHT 
                    WHERE IsActive = true 
                    ORDER BY Name LIMIT 20
                    """
                    rows = await fetch(sql)
                
                print(f"  üì¶ Retrieved {len(rows) if rows else 0} spare parts")
                return {"spare_parts": rows or [], "total_count": len(rows) if rows else 0}
            
            elif function_name == "get_inventory":
                center_id = arguments.get("center_id")
                
                base_sql = """
                SELECT i.InventoryID, i.CenterID, i.Quantity, 
                       i.MinimumStockLevel, i.IsActive
                FROM Inventory_TuHT i
                WHERE i.IsActive = true
                """
                
                if center_id:
                    sql = base_sql + " AND i.CenterID = %s ORDER BY i.Quantity ASC LIMIT 50"
                    rows = await fetch(sql, center_id)
                else:
                    sql = base_sql + " ORDER BY i.Quantity ASC LIMIT 50"
                    rows = await fetch(sql)
                
                print(f"  üìä Retrieved {len(rows) if rows else 0} inventory records")
                return {"inventory": rows or [], "total_count": len(rows) if rows else 0}
            
            elif function_name == "get_usage_history":
                months = arguments.get("months", 12)
                spare_part_id = arguments.get("spare_part_id")
                center_id = arguments.get("center_id")
                
                sql = """
                SELECT h.UsageID, h.SparePartID, h.CenterID, h.QuantityUsed,
                       h.UsedDate, s.Name as PartName, s.UnitPrice
                FROM SparePartUsageHistory_TuHT h
                LEFT JOIN SparePart_TuHT s ON h.SparePartID = s.SparePartID
                WHERE h.UsedDate >= (CURRENT_DATE - (%s::int * interval '1 month')) AND h.IsActive = true
                """
                params = [months]
                
                if spare_part_id:
                    sql += " AND h.SparePartID = %s"
                    params.append(spare_part_id)
                if center_id:
                    sql += " AND h.CenterID = %s"
                    params.append(center_id)
                    
                sql += " ORDER BY h.UsedDate DESC LIMIT 100"
                rows = await fetch(sql, *params)
                print(f"  üìà Retrieved {len(rows) if rows else 0} usage history records")
                return {"usage_history": rows or [], "total_count": len(rows) if rows else 0, "months_covered": months}
            
            else:
                return {"error": f"Unknown function: {function_name}"}
                
        except Exception as e:
            return {"error": f"Database error in {function_name}: {str(e)}"}
    
    async def generate_simple_forecast(self, data_dict: dict, forecast_months: int = 6):
        """Generate AI-powered forecast using simplified prompt (fallback method)."""
        try:
            spare_parts = data_dict.get("spare_parts", {}).get("spare_parts", [])
            inventory = data_dict.get("inventory", {}).get("inventory", [])
            usage_history = data_dict.get("usage_history", {}).get("usage_history", [])
            
            print(f"  üìä Data summary: {len(spare_parts)} parts, {len(inventory)} inventory, {len(usage_history)} usage records")
            
            # If no data available, return informative message
            if not spare_parts and not inventory:
                return {
                    "data_source": "no_data_available",
                    "success": True,
                    "forecast_period_months": forecast_months,
                    "analysis_date": datetime.now().strftime('%Y-%m-%d'),
                    "spare_parts_forecasts": [],
                    "summary": {
                        "total_parts_analyzed": 0,
                        "parts_needing_replenishment": 0,
                        "total_estimated_cost": 0,
                        "message": f"Hi·ªán t·∫°i kh√¥ng c√≥ d·ªØ li·ªáu ph·ª• t√πng trong h·ªá th·ªëng ƒë·ªÉ th·ª±c hi·ªán d·ª± b√°o {forecast_months} th√°ng. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu trong database ho·∫∑c th√™m ph·ª• t√πng m·ªõi.",
                        "recommendations": [
                            "Ki·ªÉm tra k·∫øt n·ªëi database v√† ƒë·ªìng b·ªô d·ªØ li·ªáu",
                            "Nh·∫≠p d·ªØ li·ªáu ph·ª• t√πng v√† l·ªãch s·ª≠ s·ª≠ d·ª•ng", 
                            "Thi·∫øt l·∫≠p quy tr√¨nh c·∫≠p nh·∫≠t t·ªìn kho t·ª± ƒë·ªông"
                        ]
                    }
                }
            
            # Use AI for simplified analysis
            try:
                print(f"  ü§ñ Attempting simple AI forecast with {len(spare_parts)} parts, {len(inventory)} inventory, {len(usage_history)} usage...")
                
                # Convert Decimal to avoid serialization error
                def safe_convert(data):
                    if isinstance(data, list):
                        return [{k: float(v) if hasattr(v, '__float__') else str(v) for k, v in item.items()} for item in data[:3]]
                    return []
                
                safe_parts = safe_convert(spare_parts)
                safe_inventory = safe_convert(inventory)
                safe_usage = safe_convert(usage_history)
                
                print(f"  üìä Safe converted data: parts={len(safe_parts)}, inventory={len(safe_inventory)}, usage={len(safe_usage)}")
                
                simple_prompt = f"""
                Ph√¢n t√≠ch d·ªØ li·ªáu ph·ª• t√πng xe ƒëi·ªán v√† CH·ªà TR·∫¢ V·ªÄ ph·ª• t√πng c·∫ßn b·ªï sung:
                
                PH·ª§T√ôNG: {safe_parts}
                T·ªíNKHO: {safe_inventory}
                L·ªäCHS·ª¨: {safe_usage}
                
                D·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø, ph√¢n t√≠ch xu h∆∞·ªõng s·ª≠ d·ª•ng v√† ƒë∆∞a ra d·ª± b√°o th√¥ng minh. Tr·∫£ v·ªÅ JSON:
                {{
                    "forecast_period_months": {forecast_months},
                    "analysis_date": "{datetime.now().strftime('%Y-%m-%d')}",
                    "spare_parts_forecasts": [
                        {{
                            "spare_part_id": "SparePartID t·ª´ d·ªØ li·ªáu",
                            "part_name": "Name t·ª´ d·ªØ li·ªáu",
                            "usage_pattern": "xu h∆∞·ªõng d·ª±a tr√™n l·ªãch s·ª≠",
                            "total_forecast_demand": "s·ªë d·ª± b√°o th√¥ng minh",
                            "alternative_suggestions": ["ph·ª• t√πng thay th·∫ø t∆∞∆°ng t·ª±"],
                            "replenishment_needed": "true/false",
                            "estimated_cost": "UnitPrice * forecast_demand",
                            "urgency_level": "high/medium/low",
                            "seasonal_factor": "m√πa v·ª• ·∫£nh h∆∞·ªüng"
                        }}
                    ],
                    "summary": {{
                        "total_parts_analyzed": {len(spare_parts)},
                        "high_usage_parts": "s·ªë ph·ª• t√πng d√πng nhi·ªÅu",
                        "cost_optimization_suggestions": ["g·ª£i √Ω t·ªëi ∆∞u d·ª±a tr√™n Manufacture v√† UnitPrice"],
                        "total_estimated_cost": "t·ªïng chi ph√≠ d·ª± ki·∫øn",
                        "message": "k·∫øt qu·∫£ ph√¢n t√≠ch chi ti·∫øt",
                        "recommendations": ["khuy·∫øn ngh·ªã d·ª±a tr√™n d·ªØ li·ªáu th·ª±c t·∫ø"]
                    }}
                }}
                
                L∆ØU √ù: B·∫Øt bu·ªôc ph·∫£i c√≥ c√°c field sau cho m·ªói spare_part_forecast:
                - current_stock: s·ªë t·ªìn kho hi·ªán t·∫°i
                - minimum_stock_level: m·ª©c t·ªìn kho t·ªëi thi·ªÉu  
                - total_forecast_demand: t·ªïng nhu c·∫ßu d·ª± b√°o
                - suggested_order_quantity: s·ªë l∆∞·ª£ng ƒë·ªÅ xu·∫•t ƒë·∫∑t h√†ng
                - monthly_forecasts: d·ª± b√°o theo th√°ng
                """
                
                response = self.model.generate_content(simple_prompt)
                
                if hasattr(response, 'text') and response.text:
                    response_text = response.text.strip()
                    # Clean markdown
                    if response_text.startswith('```json'):
                        response_text = response_text[7:]
                    if response_text.endswith('```'):
                        response_text = response_text[:-3]
                    response_text = response_text.strip()
                    
                    ai_result = json.loads(response_text)
                    forecasts_count = len(ai_result.get('spare_parts_forecasts', []))
                    print(f"  ‚úÖ AI simple forecast successful with {forecasts_count} forecasts")
                    return {
                        "data_source": "ai_simple_analysis",
                        "success": True,
                        **ai_result
                    }
                    
            except Exception as ai_error:
                print(f"  ‚ö†Ô∏è AI simple forecast failed: {ai_error}")
                print(f"  üìù Available data for fallback: parts={len(spare_parts)}, inventory={len(inventory)}, usage={len(usage_history)}")
            
            # Final fallback - basic structured response
            print("  üîÑ Using basic structured fallback...")
            
            # AI-powered forecast from ALL available data
            try:
                # Safe data conversion
                safe_parts_fb = [{k: float(v) if hasattr(v, '__float__') else str(v) for k, v in item.items()} for item in spare_parts[:3]]
                safe_inventory_fb = [{k: float(v) if hasattr(v, '__float__') else str(v) for k, v in item.items()} for item in inventory[:3]]
                safe_usage_fb = [{k: float(v) if hasattr(v, '__float__') else str(v) for k, v in item.items()} for item in usage_history[:3]]
                
                fallback_prompt = f"""
                Ph√¢n t√≠ch d·ªØ li·ªáu ph·ª• t√πng xe ƒëi·ªán v√† CH·ªà TR·∫¢ V·ªÄ ph·ª• t√πng c·∫ßn b·ªï sung:
                
                PH·ª§T√ôNG: {safe_parts_fb}
                T·ªíNKHO: {safe_inventory_fb}
                L·ªäCHS·ª¨: {safe_usage_fb}
                
                Tr·∫£ v·ªÅ JSON ch√≠nh x√°c:
                {{
                    "spare_parts_forecasts": [
                        {{
                            "spare_part_id": "SparePartID t·ª´ d·ªØ li·ªáu",
                            "part_name": "Name t·ª´ d·ªØ li·ªáu",
                            "current_stock": "Quantity t·ª´ inventory",
                            "minimum_stock_level": "MinimumStockLevel t·ª´ inventory",
                            "total_forecast_demand": "d·ª± b√°o th√¥ng minh",
                            "suggested_order_quantity": "s·ªë l∆∞·ª£ng ƒë·ªÅ xu·∫•t",
                            "replenishment_needed": true,
                            "estimated_cost": "chi ph√≠ d·ª± ki·∫øn",
                            "urgency_level": "high/medium/low",
                            "monthly_forecasts": [{{"month": 1, "predicted_demand": 5, "confidence": 0.8}}]
                        }}
                    ],
                    "alternatives": ["g·ª£i √Ω t·ªëi ∆∞u"]
                }}
                """
                
                ai_response = self.model.generate_content(fallback_prompt)
                if ai_response.text:
                    response_text = ai_response.text.strip()
                    if response_text.startswith('```json'):
                        response_text = response_text[7:]
                    if response_text.endswith('```'):
                        response_text = response_text[:-3]
                    response_text = response_text.strip()
                    
                    ai_data = json.loads(response_text)
                    forecasts = ai_data.get('spare_parts_forecasts', [])
                    alternatives = ai_data.get('alternatives', [])
                    print(f"  ‚úÖ AI generated {len(forecasts)} forecasts")
                else:
                    raise Exception("No AI response")
                    
            except Exception as ai_err:
                print(f"  ‚ö†Ô∏è AI fallback failed: {ai_err}, using enhanced data-driven approach")
                
                # Enhanced data-driven forecast with inventory matching
                all_forecasts = []
                for part in spare_parts:
                    part_id = str(part.get("sparepartid") or part.get("SparePartID"))
                    part_name = str(part.get("name") or part.get("Name"))
                    unit_price = float(part.get("unitprice") or part.get("UnitPrice") or 0)
                    manufacture = str(part.get("manufacture") or part.get("Manufacture") or "Unknown")
                    
                    # Find matching inventory for current stock
                    current_stock = 0
                    min_stock = 10
                    for inv in inventory:
                        inv_spare_id = str(inv.get("sparepartid") or inv.get("SparePartID") or "")
                        if inv_spare_id == part_id:
                            current_stock = int(inv.get("quantity") or inv.get("Quantity") or 0)
                            min_stock = int(inv.get("minimumstocklevel") or inv.get("MinimumStockLevel") or 10)
                            break
                    
                    # Smart demand calculation based on usage history + price
                    historical_usage = 0
                    for usage in usage_history:
                        usage_part_id = str(usage.get("sparepartid") or usage.get("SparePartID") or "")
                        if usage_part_id == part_id:
                            historical_usage += int(usage.get("quantityused") or usage.get("QuantityUsed") or 0)
                    
                    if historical_usage > 0:
                        monthly_avg = historical_usage / 24
                        total_demand = int(monthly_avg * forecast_months * 1.2)
                        urgency = "high" if monthly_avg > 5 else "medium"
                    else:
                        if unit_price > 1000000:
                            base_demand = 2
                            urgency = "high"
                        elif unit_price > 500000:
                            base_demand = 5
                            urgency = "medium"
                        else:
                            base_demand = 8
                            urgency = "low"
                        total_demand = base_demand * forecast_months
                    
                    suggested_qty = max(0, total_demand + min_stock - current_stock)
                    replenishment_needed = current_stock < (total_demand + min_stock)
                    
                    forecast_item = {
                        "spare_part_id": part_id,
                        "part_name": part_name,
                        "manufacture": manufacture,
                        "unit_price": unit_price,
                        "current_stock": current_stock,
                        "minimum_stock_level": min_stock,
                        "total_forecast_demand": total_demand,
                        "suggested_order_quantity": suggested_qty,
                        "replenishment_needed": replenishment_needed,
                        "estimated_cost": suggested_qty * unit_price,
                        "urgency_level": urgency,
                        "monthly_forecasts": [
                            {"month": i+1, "predicted_demand": max(1, total_demand // forecast_months), "confidence": 0.8 if historical_usage > 0 else 0.6}
                            for i in range(forecast_months)
                        ],
                        "reasoning": f"L·ªãch s·ª≠: {historical_usage} ƒë∆°n v·ªã, Gi√°: {unit_price:,.0f} VND" if historical_usage > 0 else f"D·ª±a tr√™n gi√° tr·ªã {unit_price:,.0f} VND"
                    }
                    
                    all_forecasts.append(forecast_item)
                
                # Debug: Check filter conditions
                print(f"  üîç Analyzing {len(all_forecasts)} forecasts for filtering...")
                
                forecasts = []
                for f in all_forecasts:
                    needs_replenishment = f["replenishment_needed"]
                    low_stock = f["current_stock"] <= f["minimum_stock_level"] * 1.5
                    high_demand = f["total_forecast_demand"] > f["current_stock"]
                    
                    # More lenient filter: include if ANY condition is true
                    if needs_replenishment or low_stock or high_demand:
                        forecasts.append(f)
                        print(f"    ‚úÖ Including {f['part_name']}: stock={f['current_stock']}, min={f['minimum_stock_level']}, demand={f['total_forecast_demand']}, replenish={needs_replenishment}")
                    else:
                        print(f"    ‚ùå Skipping {f['part_name']}: stock={f['current_stock']}, min={f['minimum_stock_level']}, demand={f['total_forecast_demand']}")
                
                # If still no forecasts, include top 3 parts regardless of criteria
                if not forecasts and all_forecasts:
                    print("  ‚ö†Ô∏è No parts met filter criteria, including top 3 parts for demonstration...")
                    sorted_forecasts = sorted(all_forecasts, key=lambda x: x['total_forecast_demand'], reverse=True)
                    forecasts = sorted_forecasts[:3]
                    for f in forecasts:
                        f['replenishment_needed'] = True  # Force to show as needing replenishment
                        print(f"    üîÑ Force including {f['part_name']}: demand={f['total_forecast_demand']}, cost={f['estimated_cost']}")
                
                alternatives = ["Xem x√©t ph·ª• t√πng t∆∞∆°ng ƒë∆∞∆°ng gi√° r·∫ª h∆°n", "K·∫øt h·ª£p ƒë·∫∑t h√†ng ƒë·ªÉ gi·∫£m chi ph√≠"]
                
                print(f"  üìä Final result: {len(forecasts)} parts selected (from {len(all_forecasts)} total)")
            
            total_cost = sum(f.get("estimated_cost", 0) for f in forecasts)
            
            # AI recommendations based on comprehensive analysis
            try:
                rec_prompt = f"""
                D·ª±a tr√™n ph√¢n t√≠ch {len(forecasts)} ph·ª• t√πng xe ƒëi·ªán v·ªõi:
                - T·ªïng chi ph√≠: {total_cost:,.0f} VND
                - S·ªë l∆∞·ª£ng l·ªãch s·ª≠: {len(usage_history)} records
                - Ph·ª• t√πng ƒë·∫Øt nh·∫•t: {max([f.get('estimated_cost', 0) for f in forecasts], default=0):,.0f} VND
                
                ƒê∆∞a ra 5 khuy·∫øn ngh·ªã th√¥ng minh cho qu·∫£n l√Ω t·ªëi ∆∞u. JSON: ["khuy·∫øn ngh·ªã 1", "khuy·∫øn ngh·ªã 2", "khuy·∫øn ngh·ªã 3", "khuy·∫øn ngh·ªã 4", "khuy·∫øn ngh·ªã 5"]
                """
                rec_response = self.model.generate_content(rec_prompt)
                recommendations = json.loads(rec_response.text.strip().replace('```json', '').replace('```', '')) if rec_response.text else alternatives
            except:
                recommendations = alternatives or ["T·ªëi ∆∞u h√≥a quy tr√¨nh qu·∫£n l√Ω t·ªìn kho", "Theo d√µi xu h∆∞·ªõng s·ª≠ d·ª•ng th·ª±c t·∫ø"]
            
            return {
                "data_source": "ai_enhanced_comprehensive",
                "success": True,
                "forecast_period_months": forecast_months,
                "analysis_date": datetime.now().strftime('%Y-%m-%d'),
                "data_coverage": {"parts": len(spare_parts), "inventory": len(inventory), "usage_records": len(usage_history)},
                "spare_parts_forecasts": forecasts,
                "summary": {
                    "total_parts_analyzed": len(forecasts),
                    "parts_needing_replenishment": len([f for f in forecasts if f.get('replenishment_needed')]),
                    "high_priority_parts": len([f for f in forecasts if f.get('urgency_level') == 'high']),
                    "total_estimated_cost": total_cost,
                    "cost_optimization_potential": len(alternatives) if 'alternatives' in locals() else 0,
                    "message": f"Ph√¢n t√≠ch th√¥ng minh {len(forecasts)} ph·ª• t√πng d·ª±a tr√™n {len(usage_history)} b·∫£n ghi l·ªãch s·ª≠. D·ª± b√°o {forecast_months} th√°ng v·ªõi t·ªïng chi ph√≠ {total_cost:,.0f} VND.",
                    "recommendations": recommendations,
                    "alternative_suggestions": alternatives if 'alternatives' in locals() else []
                }
            }
            
        except Exception as e:
            return {
                "data_source": "error_fallback", 
                "success": False,
                "error": f"Simple forecast error: {str(e)}"
            }
    
    async def generate_forecast(self, spare_part_id: str = None, center_id: str = None, forecast_months: int = 6):
        """Generate forecast with fallback mechanism for better reliability."""
        
        print(f"üîÆ Generating forecast for {forecast_months} months...")
        
        try:
            # Step 1: Collect all data first - Use direct database connection
            print("üìä Collecting data from database...")
            
            from db_connection import fetch
            
            # Get ALL spare parts (no limit)
            print("  üîç Fetching ALL spare parts...")
            spare_parts = await fetch("""
                SELECT SparePartID, Name, UnitPrice, Manufacture, IsActive
                FROM SparePart_TuHT 
                WHERE IsActive = true 
                ORDER BY UnitPrice DESC
            """)
            print(f"  ‚úÖ Spare parts: {len(spare_parts)} items")
            
            # Get ALL inventory with SparePartID for matching
            print("  üîç Fetching ALL inventory with SparePartID...")
            inventory = await fetch("""
                SELECT i.InventoryID, i.CenterID, i.Quantity, 
                       i.MinimumStockLevel, i.IsActive,
                       s.SparePartID, s.Name as PartName
                FROM Inventory_TuHT i
                LEFT JOIN SparePart_TuHT s ON i.InventoryID = s.InventoryID
                WHERE i.IsActive = true AND s.IsActive = true
                ORDER BY i.Quantity ASC
            """)
            print(f"  ‚úÖ Inventory: {len(inventory)} items")
            if inventory:
                print(f"  üîç First inventory keys: {list(inventory[0].keys())}")
            
            # Get usage history for analysis
            print("  üîç Fetching usage history...")
            usage_history = await fetch("""
                SELECT h.UsageID, h.SparePartID, h.CenterID, h.QuantityUsed, h.UsedDate,
                       s.Name as PartName, s.UnitPrice, s.Manufacture,
                       EXTRACT(MONTH FROM h.UsedDate) as UsageMonth,
                       EXTRACT(YEAR FROM h.UsedDate) as UsageYear
                FROM SparePartUsageHistory_TuHT h
                LEFT JOIN SparePart_TuHT s ON h.SparePartID = s.SparePartID
                WHERE h.IsActive = true AND s.IsActive = true
                  AND h.UsedDate >= (CURRENT_DATE - INTERVAL '24 months')
                ORDER BY h.UsedDate DESC
            """)
            print(f"  ‚úÖ Usage history: {len(usage_history)} records")
            
            # Prepare comprehensive data results
            data_results = {
                "spare_parts": {"spare_parts": spare_parts, "total_count": len(spare_parts)},
                "inventory": {"inventory": inventory, "total_count": len(inventory)},
                "usage_history": {"usage_history": usage_history, "total_count": len(usage_history)}
            }
            
            # Step 2: Try AI-based forecast first
            print("ü§ñ Attempting AI-based forecast...")
            
            try:
                # Prepare comprehensive data for AI analysis
                spare_parts_data = data_results['spare_parts'].get('spare_parts', [])
                inventory_data = data_results['inventory'].get('inventory', [])
                usage_data = data_results['usage_history'].get('usage_history', [])
                
                # Convert Decimal to float for JSON serialization
                def convert_decimals(obj):
                    if isinstance(obj, list):
                        return [convert_decimals(item) for item in obj]
                    elif isinstance(obj, dict):
                        return {k: convert_decimals(v) for k, v in obj.items()}
                    elif hasattr(obj, '__float__'):
                        return float(obj)
                    return obj
                
                clean_spare_parts = convert_decimals(spare_parts_data[:5])
                clean_inventory = convert_decimals(inventory_data[:5])
                clean_usage = convert_decimals(usage_data[:5])
                
                forecast_prompt = f"""
                B·∫°n l√† chuy√™n gia AI d·ª± b√°o ph·ª• t√πng th√¥ng minh cho trung t√¢m xe ƒëi·ªán.
                Ph√¢n t√≠ch d·ªØ li·ªáu sau v√† CH·ªà TR·∫¢ V·ªÄ ph·ª• t√πng c·∫ßn b·ªï sung ho·∫∑c s·∫Øp c·∫ßn b·ªï sung:
                
                PH·ª§ T√ôNG: {json.dumps(clean_spare_parts, ensure_ascii=False)}
                T·ªíN KHO: {json.dumps(clean_inventory, ensure_ascii=False)}
                L·ªäCH S·ª≠: {json.dumps(clean_usage, ensure_ascii=False)}
                
                Y√äU C·∫¶U PH√ÇN T√çCH TH√îNG MINH:
                1. Ph√¢n t√≠ch xu h∆∞·ªõng s·ª≠ d·ª•ng theo th√°ng/m√πa t·ª´ l·ªãch s·ª≠
                2. X√°c ƒë·ªãnh ph·ª• t√πng hay h·ªèng/√≠t d√πng d·ª±a tr√™n t·∫ßn su·∫•t
                3. T√≠nh to√°n nhu c·∫ßu d·ª± ki·∫øn d·ª±a tr√™n pattern th·ª±c t·∫ø
                4. ƒê·ªÅ xu·∫•t thay th·∫ø/t·ªëi ∆∞u h√≥a d·ª±a tr√™n gi√° tr·ªã v√† t·∫ßn su·∫•t
                5. ∆Øu ti√™n ph·ª• t√πng quan tr·ªçng/ƒë·∫Øt ti·ªÅn c·∫ßn theo d√µi g·∫ßn
                2. D·ª± b√°o nhu c·∫ßu s·ª≠ d·ª•ng d·ª±a tr√™n lo·∫°i ph·ª• t√πng v√† gi√° tr·ªã
                3. X√°c ƒë·ªãnh ƒë·ªô ∆∞u ti√™n b·ªï sung (ph·ª• t√πng ƒë·∫Øt ti·ªÅn = ∆∞u ti√™n cao)
                4. T√≠nh to√°n chi ph√≠ d·ª± ki·∫øn
                
                Tr·∫£ v·ªÅ CH√çNH X√ÅC ƒë·ªãnh d·∫°ng JSON sau (kh√¥ng th√™m text kh√°c):
                {{
                    "forecast_period_months": {forecast_months},
                    "analysis_date": "{datetime.now().strftime('%Y-%m-%d')}",
                    "spare_parts_forecasts": [
                        {{
                            "spare_part_id": "SparePartID t·ª´ d·ªØ li·ªáu",
                            "part_name": "Name t·ª´ d·ªØ li·ªáu",
                            "current_stock": "s·ªë t·ªìn kho hi·ªán t·∫°i (t·ª´ Inventory)",
                            "minimum_stock_level": "MinimumStockLevel t·ª´ Inventory",
                            "total_forecast_demand": "t·ªïng nhu c·∫ßu d·ª± b√°o {forecast_months} th√°ng",
                            "suggested_order_quantity": "= total_forecast_demand + minimum_stock_level - current_stock (n·∫øu > 0)",
                            "monthly_forecasts": [
                                {{"month": 1, "predicted_demand": "nhu c·∫ßu th√°ng 1", "confidence": 0.8}},
                                {{"month": 2, "predicted_demand": "nhu c·∫ßu th√°ng 2", "confidence": 0.75}}
                            ],
                            "replenishment_needed": "true n·∫øu current_stock < total_forecast_demand + minimum_stock_level",
                            "estimated_cost": "suggested_order_quantity * UnitPrice",
                            "urgency_level": "high n·∫øu UnitPrice cao ho·∫∑c current_stock r·∫•t th·∫•p"
                        }}
                    ],
                    "summary": {{
                        "total_parts_analyzed": "s·ªë ph·ª• t√πng ƒë√£ ph√¢n t√≠ch",
                        "parts_needing_replenishment": "s·ªë ph·ª• t√πng c·∫ßn b·ªï sung",
                        "total_estimated_cost": "t·ªïng chi ph√≠ d·ª± ki·∫øn",
                        "message": "th√¥ng ƒëi·ªáp t√≥m t·∫Øt b·∫±ng ti·∫øng Vi·ªát",
                        "recommendations": ["danh s√°ch khuy·∫øn ngh·ªã"]
                    }}
                }}
                """
                
                response = self.model.generate_content(forecast_prompt)
                
                # Check if response has text
                if hasattr(response, 'text') and response.text:
                    try:
                        # Clean response text
                        response_text = response.text.strip()
                        # Remove any markdown code blocks
                        if response_text.startswith('```json'):
                            response_text = response_text[7:]
                        if response_text.endswith('```'):
                            response_text = response_text[:-3]
                        response_text = response_text.strip()
                        
                        # Try to parse as JSON
                        ai_forecast = json.loads(response_text)
                        print("  ‚úÖ AI forecast generated successfully")
                        return {
                            "data_source": "ai_analysis_real_data",
                            "success": True,
                            **ai_forecast
                        }
                    except json.JSONDecodeError as je:
                        print(f"  ‚ö†Ô∏è AI response not valid JSON: {je}, using fallback")
                        print(f"  üìù AI Response: {response.text[:200]}...")
                else:
                    print("  ‚ö†Ô∏è AI response empty or blocked, using fallback")
                    
            except Exception as e:
                print(f"  ‚ö†Ô∏è AI forecast failed: {str(e)}, using fallback")
            
            # Step 3: Use fallback simple forecast
            print("üîÑ Using simplified AI forecast...")
            return await self.generate_simple_forecast(data_results, forecast_months)
            
        except Exception as e:
            print(f"‚ùå Forecast generation failed: {str(e)}")
            return {
                "data_source": "supabase_real_data",
                "success": False,
                "error": f"Forecast generation error: {str(e)}"
            }
    
    async def save_forecast_to_database(self, forecast_data):
        """Save forecast results to SparePartForecast_TuHT table."""
        try:
            from db_connection import execute
            
            if not forecast_data.get("spare_parts_forecasts"):
                return {"error": "No forecast data to save"}
            
            saved_count = 0
            
            for forecast in forecast_data["spare_parts_forecasts"]:
                # Calculate values
                total_demand = forecast.get("total_forecast_demand", 0)
                confidence = 0.8  # Default confidence
                
                # Insert into database
                insert_sql = """
                INSERT INTO SparePartForecast_TuHT (
                    SparePartID, CenterID, PredictedUsage, SafetyStock, ReorderPoint, 
                    ForecastedBy, ForecastConfidence, ForecastDate, Status, IsActive, createdAt
                )
                VALUES (%s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, 'PENDING', true, CURRENT_TIMESTAMP)
                """
                
                # Get a valid CenterID from inventory or use default
                center_id = None
                try:
                    from db_connection import fetch
                    centers = await fetch("SELECT CenterID FROM CenterTuantm WHERE IsActive = true LIMIT 1")
                    if centers:
                        center_id = centers[0].get("centerid") or centers[0].get("CenterID")
                except:
                    pass
                
                if not center_id:
                    # Skip saving if we can't get a valid center_id
                    print(f"‚ö†Ô∏è No valid center_id found, skipping save for {forecast['spare_part_id']}")
                    continue
                
                await execute(
                    insert_sql,
                    forecast["spare_part_id"],
                    center_id,  # Use valid center_id
                    total_demand,
                    forecast.get("suggested_order_quantity", total_demand),
                    max(10, int(total_demand * 0.2)),  # reorder point
                    "AI_INTEGRATED_CHATBOT",
                    confidence
                )
                saved_count += 1
                
            return {
                "success": True,
                "saved_forecasts": saved_count,
                "message": f"Successfully saved {saved_count} forecasts to database"
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Database save error: {str(e)}",
                "saved_forecasts": 0
            }

# Async wrapper functions for integration
async def forecast_demand(spare_part_id: str = None, center_id: str = None, forecast_months: int = 6):
    """Async wrapper for forecast generation."""
    try:
        engine = ForecastEngine()
        
        # Generate forecast
        forecast_result = await engine.generate_forecast(
            spare_part_id=spare_part_id,
            center_id=center_id, 
            forecast_months=int(forecast_months)
        )
        
        return forecast_result
        
    except Exception as e:
        return {
            "data_source": "supabase_real_data",
            "success": False,
            "error": f"Forecast wrapper error: {str(e)}"
        }

async def run_forecast_async(spare_part_id: str = None, center_id: str = None, forecast_months: int = 6):
    result = await forecast_demand(spare_part_id, center_id, forecast_months)
    return result